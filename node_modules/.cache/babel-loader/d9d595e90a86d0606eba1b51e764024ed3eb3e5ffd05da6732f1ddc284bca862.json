{"ast":null,"code":"var _jsxFileName = \"/Users/ashley/myportfolio/src/components/Banner.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Banner() {\n  _s();\n  const rotate = [\"Web Developer\", \"Software Engineer\", \"Front-End Developer\"];\n  // tell us how long each word would be typed out (transition between each word)\n  const period = 2000;\n  const [loopNum, setLoopNum] = useState(0);\n  // is the word being typed out or being deleted\n  const [isDeleting, setIsDeleting] = useState(false);\n  // is the word that currently being typed out starting from letter to end\n  const [text, setText] = useState('');\n  // how long each letter comes after the first one is typed\n  const [delta, setDelta] = useState(300 - Math.random() * 150);\n  // const[index, setIndex] = useState(1); \n\n  useEffect(() => {\n    let ticker = setInterval(() => {\n      // whenthe tik is being fired off\n      tick();\n    }, delta);\n    // clear the interval \n    return () => {\n      clearInterval(ticker);\n    };\n    // we want to run eveytime teh text gets updated\n  }, [text]);\n  const tick = () => {\n    // this would lets us know what wird we are currenlty peeking\n    // has % because it would keep looping to the first index when reaching the last one\n    let i = loopNum % rotate.length;\n    let fullText = rotate[i];\n    let updatedText = isDeleting ? fullText.substring(0, text.length - 1) : fullText.substring(0, text.length + 1);\n    setText(updatedText);\n\n    // check is the current word is being deleted\n    if (isDeleting) {\n      // get the previous delta and cut it in half\n      setDelta(prevDelta => prevDelta / 2);\n    }\n    // if it is not deleting and has reached the full word\n    if (!isDeleting && updatedText === fullText) {\n      setIsDeleting(true);\n      setDelta(period);\n    }\n    // if it is deleting and got to the point where the text has been completely deleted. \n    else if (isDeleting && updatedText === \"\") {\n      setIsDeleting(false);\n      setLoopNum(loopNum + 1);\n      setDelta(250);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"banner\",\n    id: \"home\",\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"header\",\n        children: \" Hey! I'm Ashley and I'm a \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 81\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"wrap\",\n        children: [\" \", text]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 13\n  }, this);\n}\n_s(Banner, \"mprymojuzQWnrTcQNqKL4GARlA8=\");\n_c = Banner;\nexport default Banner;\nvar _c;\n$RefreshReg$(_c, \"Banner\");","map":{"version":3,"names":["useState","useEffect","Container","jsxDEV","_jsxDEV","Banner","_s","rotate","period","loopNum","setLoopNum","isDeleting","setIsDeleting","text","setText","delta","setDelta","Math","random","ticker","setInterval","tick","clearInterval","i","length","fullText","updatedText","substring","prevDelta","className","id","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ashley/myportfolio/src/components/Banner.js"],"sourcesContent":["import {useState, useEffect} from \"react\"; \nimport {Container} from \"react-bootstrap\";\n\nfunction Banner(){\n    const rotate = [\"Web Developer\", \"Software Engineer\", \"Front-End Developer\"]; \n    // tell us how long each word would be typed out (transition between each word)\n    const period = 2000; \n\n    const [loopNum, setLoopNum] = useState(0); \n    // is the word being typed out or being deleted\n    const [isDeleting, setIsDeleting] = useState(false);\n    // is the word that currently being typed out starting from letter to end\n    const [text, setText] = useState(''); \n    // how long each letter comes after the first one is typed\n    const [delta, setDelta] = useState(300-Math.random() * 150);\n    // const[index, setIndex] = useState(1); \n\n    useEffect(() => {\n        let ticker = setInterval(() => {\n            // whenthe tik is being fired off\n            tick(); \n        }, delta); \n        // clear the interval \n        return () => {clearInterval(ticker)}; \n        // we want to run eveytime teh text gets updated\n    }, [text])\n\n    const tick = () => {\n        // this would lets us know what wird we are currenlty peeking\n        // has % because it would keep looping to the first index when reaching the last one\n        let i = loopNum % rotate.length; \n        let fullText = rotate[i]; \n        let updatedText = isDeleting ? fullText.substring(0, text.length -1) : fullText.substring(0, text.length + 1); \n        setText(updatedText); \n\n        // check is the current word is being deleted\n       if(isDeleting){\n            // get the previous delta and cut it in half\n            setDelta(prevDelta => prevDelta/2); \n        }\n        // if it is not deleting and has reached the full word\n        if(!isDeleting && updatedText === fullText){\n            setIsDeleting(true); \n            setDelta(period);\n        } \n        // if it is deleting and got to the point where the text has been completely deleted. \n        else if(isDeleting && updatedText === \"\"){\n            setIsDeleting(false); \n            setLoopNum(loopNum + 1) \n            setDelta(250); \n            }\n}\n    return (\n            <section className=\"banner\" id=\"home\"> \n                <Container> \n                    <span className=\"header\"> Hey! I'm Ashley and I'm a </span> <br/> \n                    <span className=\"wrap\"> {text}</span> \n                </Container>\n            </section>\n    )\n\n}\n\nexport default Banner; "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}