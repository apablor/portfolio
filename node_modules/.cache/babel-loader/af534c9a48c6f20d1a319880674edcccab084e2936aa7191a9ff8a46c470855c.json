{"ast":null,"code":"import _slicedToArray from\"/Users/ashley/Documents/GitHub/portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useState,useEffect}from\"react\";import{Container}from\"react-bootstrap\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function Banner(){var rotate=[\"Web Developer\",\"Software Engineer\",\"Front-End Developer\"];// tell us how long each word would be typed out (transition between each word)\nvar period=2000;var _useState=useState(0),_useState2=_slicedToArray(_useState,2),loopNum=_useState2[0],setLoopNum=_useState2[1];// is the word being typed out or being deleted\nvar _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),isDeleting=_useState4[0],setIsDeleting=_useState4[1];// is the word that currently being typed out starting from letter to end\nvar _useState5=useState(''),_useState6=_slicedToArray(_useState5,2),text=_useState6[0],setText=_useState6[1];// how long each letter comes after the first one is typed\nvar _useState7=useState(300-Math.random()*150),_useState8=_slicedToArray(_useState7,2),delta=_useState8[0],setDelta=_useState8[1];// const[index, setIndex] = useState(1); \nuseEffect(function(){var ticker=setInterval(function(){// whenthe tik is being fired off\ntick();},delta);// clear the interval \nreturn function(){clearInterval(ticker);};// we want to run eveytime teh text gets updated\n},[text]);var tick=function tick(){// this would lets us know what wird we are currenlty peeking\n// has % because it would keep looping to the first index when reaching the last one\nvar i=loopNum%rotate.length;var fullText=rotate[i];var updatedText=isDeleting?fullText.substring(0,text.length-1):fullText.substring(0,text.length+1);setText(updatedText);// check is the current word is being deleted\nif(isDeleting){// get the previous delta and cut it in half\nsetDelta(function(prevDelta){return prevDelta/2;});}// if it is not deleting and has reached the full word\nif(!isDeleting&&updatedText===fullText){setIsDeleting(true);setDelta(period);}// if it is deleting and got to the point where the text has been completely deleted. \nelse if(isDeleting&&updatedText===\"\"){setIsDeleting(false);setLoopNum(loopNum+1);setDelta(250);}};return/*#__PURE__*/_jsx(\"section\",{className:\"banner\",id:\"home\",children:/*#__PURE__*/_jsxs(Container,{children:[/*#__PURE__*/_jsx(\"span\",{className:\"header\",children:\" Hey! I'm Ashley and I'm a \"}),\" \",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"span\",{className:\"wrap\",children:[\" \",text]})]})});}export default Banner;","map":{"version":3,"names":["useState","useEffect","Container","jsx","_jsx","jsxs","_jsxs","Banner","rotate","period","_useState","_useState2","_slicedToArray","loopNum","setLoopNum","_useState3","_useState4","isDeleting","setIsDeleting","_useState5","_useState6","text","setText","_useState7","Math","random","_useState8","delta","setDelta","ticker","setInterval","tick","clearInterval","i","length","fullText","updatedText","substring","prevDelta","className","id","children"],"sources":["/Users/ashley/Documents/GitHub/portfolio/src/components/Banner.js"],"sourcesContent":["import {useState, useEffect} from \"react\"; \nimport {Container} from \"react-bootstrap\";\n\nfunction Banner(){\n    const rotate = [\"Web Developer\", \"Software Engineer\", \"Front-End Developer\"]; \n    // tell us how long each word would be typed out (transition between each word)\n    const period = 2000; \n\n    const [loopNum, setLoopNum] = useState(0); \n    // is the word being typed out or being deleted\n    const [isDeleting, setIsDeleting] = useState(false);\n    // is the word that currently being typed out starting from letter to end\n    const [text, setText] = useState(''); \n    // how long each letter comes after the first one is typed\n    const [delta, setDelta] = useState(300-Math.random() * 150);\n    // const[index, setIndex] = useState(1); \n\n    useEffect(() => {\n        let ticker = setInterval(() => {\n            // whenthe tik is being fired off\n            tick(); \n        }, delta); \n        // clear the interval \n        return () => {clearInterval(ticker)}; \n        // we want to run eveytime teh text gets updated\n    }, [text])\n\n    const tick = () => {\n        // this would lets us know what wird we are currenlty peeking\n        // has % because it would keep looping to the first index when reaching the last one\n        let i = loopNum % rotate.length; \n        let fullText = rotate[i]; \n        let updatedText = isDeleting ? fullText.substring(0, text.length -1) : fullText.substring(0, text.length + 1); \n        setText(updatedText); \n\n        // check is the current word is being deleted\n       if(isDeleting){\n            // get the previous delta and cut it in half\n            setDelta(prevDelta => prevDelta/2); \n        }\n        // if it is not deleting and has reached the full word\n        if(!isDeleting && updatedText === fullText){\n            setIsDeleting(true); \n            setDelta(period);\n        } \n        // if it is deleting and got to the point where the text has been completely deleted. \n        else if(isDeleting && updatedText === \"\"){\n            setIsDeleting(false); \n            setLoopNum(loopNum + 1) \n            setDelta(250); \n            }\n}\n    return (\n            <section className=\"banner\" id=\"home\"> \n                <Container> \n                    <span className=\"header\"> Hey! I'm Ashley and I'm a </span> <br/> \n                    <span className=\"wrap\"> {text}</span> \n                </Container>\n            </section>\n    )\n\n}\n\nexport default Banner; "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}